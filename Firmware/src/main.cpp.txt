
#include <DMD32.h>
#include <RTClib.h>
#include <TimeLib.h>
#include <WiFi.h>
#include <WiFiUdp.h>

#include "angka_score.h"
// #define PIN_DMD_nOE 16
// #define PIN_DMD_A 19      // D19
// #define PIN_DMD_B 4       // D4
// #define PIN_DMD_CLK 18    // D18_SCK  is SPI Clock if SPI is used
// #define PIN_DMD_SCLK 2    // D02
// #define PIN_DMD_R_DATA 23 // D23_MOSI is SPI Master Out if SPI is used
// // Fire up the DMD library as dmd
#define brigthnessPin PIN_DMD_nOE
#define DISPLAYS_ACROSS 2
#define DISPLAYS_DOWN 1
DMD dmd(DISPLAYS_ACROSS, DISPLAYS_DOWN);
RTC_DS3231 rtc;

// Timer setup
// create a hardware timer  of ESP32
#define HW_TIMER 3UL // 0 ~ 3
hw_timer_t *timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;
void IRAM_ATTR triggerScan() {
  // update dmd display
  portENTER_CRITICAL_ISR(&timerMux);
  dmd.scanDisplayBySPI();
  portEXIT_CRITICAL_ISR(&timerMux);
}

// setting PWM properties
const int freq = 10000;
const int ledChannel = 0;
const int resolution = 8;
uint8_t timA = 0, timB = 0;

const char ssid[] = "I2q";      //  your network SSID (name)
const char pass[] = "88888888"; // your network password

// NTP Servers:
static const char ntpServerName[] = "us.pool.ntp.org";
const int timeZone = 7;
WiFiUDP Udp;
unsigned int localPort = 8888; // local port to listen for UDP packets

// function
void drawDots();
void drawClock(uint8_t scoreA, uint8_t scoreB);
time_t getNtpTime();
void digitalClockDisplay();
void printDigits(int digits);
void sendNTPpacket(IPAddress &address);

void setup(void) {
  // NTP clock init
  Serial.begin(115200);
  delay(250);
  rtc.begin();

  Serial.println("TimeNTP Example");
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, pass);
  uint8_t reconnect = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    reconnect++;
    if (reconnect >= 20)
      ESP.restart();
  }

  Serial.print("IP number assigned by DHCP is ");
  Serial.println(WiFi.localIP());
  Serial.println("Starting UDP");
  Udp.begin(localPort);
  Serial.println("waiting for sync");
  setSyncProvider(getNtpTime);
  setSyncInterval(300);

  //  return the clock speed of the CPU
  uint8_t cpuClock = ESP.getCpuFreqMHz();
  // Use 1st timer of 4
  // devide cpu clock speed on its speed value by MHz to get 1us for each signal  of the timer
  timer = timerBegin(HW_TIMER, cpuClock, true);
  // Attach triggerScan function to our timer
  timerAttachInterrupt(timer, &triggerScan, true);
  // Set alarm to call triggerScan function
  // Repeat the alarm (third parameter)
  timerAlarmWrite(timer, 300, true);
  // Start an alarm
  timerAlarmEnable(timer);
  // clear/init the DMD pixels held in RAM
  dmd.clearScreen(true); // true is normal (all pixels off), false is negative (all pixels on)
  dmd.selectFont(angka_score);

  // brightness
  ledcSetup(ledChannel, freq, resolution);
  ledcAttachPin(brigthnessPin, ledChannel);
  ledcWrite(ledChannel, 10);
  // delay(5000);
}
time_t prevDisplay = 0; // when the digital clock was displayed
uint32_t clearDotTicks = 0;
bool enable_clear = false;
void loop(void) {
  if (timeStatus() != timeNotSet) {
    if (now() != prevDisplay) { // update the display only if time has changed
      prevDisplay = now();
      drawDots();
      enable_clear = true;
      digitalClockDisplay();
      clearDotTicks = millis();
    }
  }
  if ((millis() - clearDotTicks >= 500) && enable_clear) {
    dmd.clearScreen(true);
    drawClock(hour(), minute());
    enable_clear = false;
  }
}

void drawDots() {
  dmd.drawFilledBox(30, 3, 33, 6, 0);
  dmd.drawFilledBox(30, 9, 33, 12, 0);
}

void drawClock(uint8_t scoreA, uint8_t scoreB) {
  uint8_t _scoreA[2] = {0}, _scoreB[2] = {0};
  if (scoreA >= 100)
    scoreA = 0;
  _scoreA[0] = ((uint8_t)scoreA / 10) + 48;
  _scoreA[1] = ((uint8_t)scoreA % 10) + 48;
  dmd.drawChar(2, 0, _scoreA[0], 0);
  dmd.drawChar(14, 0, _scoreA[1], 0);
  if (scoreB >= 100)
    scoreB = 0;
  _scoreB[0] = ((uint8_t)scoreB / 10) + 48;
  _scoreB[1] = ((uint8_t)scoreB % 10) + 48;
  dmd.drawChar(38, 0, _scoreB[0], 0);
  dmd.drawChar(50, 0, _scoreB[1], 0);
}

void digitalClockDisplay() {
  // digital clock display of the time
  Serial.print(hour());
  printDigits(minute());
  printDigits(second());
  drawClock(hour(), minute());
  Serial.print(" ");
  Serial.print(day());
  Serial.print(".");
  Serial.print(month());
  Serial.print(".");
  Serial.print(year());
  Serial.println();
}

void printDigits(int digits) {
  // utility for digital clock display: prints preceding colon and leading 0
  Serial.print(":");
  if (digits < 10)
    Serial.print('0');
  Serial.print(digits);
}

/*-------- NTP code ----------*/

const int NTP_PACKET_SIZE = 48;     // NTP time is in the first 48 bytes of message
byte packetBuffer[NTP_PACKET_SIZE]; // buffer to hold incoming & outgoing packets

time_t getNtpTime() {
  IPAddress ntpServerIP; // NTP server's ip address

  while (Udp.parsePacket() > 0)
    ; // discard any previously received packets
  Serial.println("Transmit NTP Request");
  // get a random server from the pool
  WiFi.hostByName(ntpServerName, ntpServerIP);
  Serial.print(ntpServerName);
  Serial.print(": ");
  Serial.println(ntpServerIP);
  sendNTPpacket(ntpServerIP);
  uint32_t beginWait = millis();
  while (millis() - beginWait < 1500) {
    int size = Udp.parsePacket();
    if (size >= NTP_PACKET_SIZE) {
      Serial.println("Receive NTP Response");
      Udp.read(packetBuffer, NTP_PACKET_SIZE); // read packet into the buffer
      unsigned long secsSince1900;
      // convert four bytes starting at location 40 to a long integer
      secsSince1900 = (unsigned long)packetBuffer[40] << 24;
      secsSince1900 |= (unsigned long)packetBuffer[41] << 16;
      secsSince1900 |= (unsigned long)packetBuffer[42] << 8;
      secsSince1900 |= (unsigned long)packetBuffer[43];
      rtc.adjust(DateTime(secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR));
      return secsSince1900 - 2208988800UL + timeZone * SECS_PER_HOUR;
    }
  }
  Serial.println("No NTP Response :-(");
  return 0; // return 0 if unable to get the time
}

// send an NTP request to the time server at the given address
void sendNTPpacket(IPAddress &address) {
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  // (see URL above for details on the packets)
  packetBuffer[0] = 0b11100011; // LI, Version, Mode
  packetBuffer[1] = 0;          // Stratum, or type of clock
  packetBuffer[2] = 6;          // Polling Interval
  packetBuffer[3] = 0xEC;       // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12] = 49;
  packetBuffer[13] = 0x4E;
  packetBuffer[14] = 49;
  packetBuffer[15] = 52;
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  Udp.beginPacket(address, 123); // NTP requests are to port 123
  Udp.write(packetBuffer, NTP_PACKET_SIZE);
  Udp.endPacket();
}